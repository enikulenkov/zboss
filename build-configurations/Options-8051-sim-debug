#/***************************************************************************
#*                      ZBOSS ZigBee Pro 2007 stack                         *
#*                                                                          *
#*          Copyright (c) 2012 DSR Corporation Denver CO, USA.              *
#*                       http://www.dsr-wireless.com                        *
#*                                                                          *
#*                            All rights reserved.                          *
#*          Copyright (c) 2011 ClarIDy Solutions, Inc., Taipei, Taiwan.     *
#*                       http://www.claridy.com/                            *
#*                                                                          *
#*          Copyright (c) 2011 Uniband Electronic Corporation (UBEC),       *
#*                             Hsinchu, Taiwan.                             *
#*                       http://www.ubec.com.tw/                            *
#*                                                                          *
#*          Copyright (c) 2011 DSR Corporation Denver CO, USA.              *
#*                       http://www.dsr-wireless.com                        *
#*                                                                          *
#*                            All rights reserved.                          *
#*                                                                          *
#*                                                                          *
#* ZigBee Pro 2007 stack, also known as ZBOSS (R) ZB stack is available     *
#* under either the terms of the Commercial License or the GNU General      *
#* Public License version 2.0.  As a recipient of ZigBee Pro 2007 stack, you*
#* may choose which license to receive this code under (except as noted in  *
#* per-module LICENSE files).                                               *
#*                                                                          *
#* ZBOSS is a registered trademark of DSR Corporation AKA Data Storage      *
#* Research LLC.                                                            *
#*                                                                          *
#* GNU General Public License Usage                                         *
#* This file may be used under the terms of the GNU General Public License  *
#* version 2.0 as published by the Free Software Foundation and appearing   *
#* in the file LICENSE.GPL included in the packaging of this file.  Please  *
#* review the following information to ensure the GNU General Public        *
#* License version 2.0 requirements will be met:                            *
#* http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.                   *
#*                                                                          *
#* Commercial Usage                                                         *
#* Licensees holding valid ClarIDy/UBEC/DSR Commercial licenses may use     *
#* this file in accordance with the ClarIDy/UBEC/DSR Commercial License     *
#* Agreement provided with the Software or, alternatively, in accordance    *
#* with the terms contained in a written agreement between you and          *
#* ClarIDy/UBEC/DSR.                                                        *
#*                                                                          *
#****************************************************************************
#PURPOSE:
#*/

PLATFORM_DEFINES=  -DZB_PLATFORM_8051_SIM -DC8051F120 -DZB_NS_BUILD -DZB_ED_ROLE -DZB_LIMITED_FEATURES  -DZB_LIMITED_FEATURES2

####### Common options

CC	=	sdcc


#
# Configure trace by changing ZB_TRACE_MASK (one bit per layer)
# and ZB_TRACE_LEVEL (messages with layer > ZB_TRACE_LEVEL are unvisible).
# Do not define ZB_TRACE_LEVEL to switch off trace.
#
TRACE_DEFINES = -DZB_TRACE_LEVEL=1 -DZB_TRACE_MASK=-1
#TRACE_DEFINES =

DEBUG_DEFINES = $(TRACE_DEFINES)
# --debug

RELEASE_OPTIMIZATION_FLAGS = --opt-code-size

RELEASE_CFLAGS = $(RELEASE_OPTIMIZATION_FLAGS) $(TRACE_DEFINES)

# for the banked build, uncomment this banked switch and ZB_BANKED_BUILD define in zb_config.h
#BANKED_SWITCH=  -Wl-r -Wl-bHOME=0x0000
# -Wl-bBANK1=0x8000 -Wl-bBANK2=0x10000 -Wl-bBANK3=0x18000 -Wl-bBANK4=0x20000 \
# -Wl-bBANK5=0x28000 -Wl-bBANK6=0x030000 -Wl-bBANK7=0x038000 -Wl-bBANK8=0x040000 -Wl-bBANK9=0x048000 -Wl-bBANK10=0x050000 

BANKED_SWITCH=


#-Wl-bBANK6=0x30000
#MEMORY_MODEL =  --opt-code-size --model-large $(BANKED_SWITCH) --code-size 256000
#MEMORY_MODEL =  --nogcse --xstack --model-large $(BANKED_SWITCH) --code-size 512000
MEMORY_MODEL =  --opt-code-size --model-large $(BANKED_SWITCH) --code-size 512000


WERROR =
#WARN_OPTIONS = --more-pedantic

#disable that strange warning about DOG
WARN_OPTIONS = --disable-warning 110 --disable-warning 126

CFLAGS_BUILD_CFG = $(DEBUG_CFLAGS) 

DEFINES = $(PLATFORM_DEFINES) $(DEBUG_DEFINES)

CFLAGS = $(CFLAGS_BUILD_CFG) $(MEMORY_MODEL) $(CFLAGS_USER) $(WARN_OPTIONS) $(WERROR)


DEPSWITCH      = -MM
RM      =       rm -rf
MAKE    =       make -e

MAKE_LIB    = sdcclib -a $@ $^

LINK_BINARY = $(CC) $(CFLAGS_BUILD_CFG) $(MEMORY_MODEL) -o $@ $^ $(LIBS) $(LIBS)

#
# Implicit rules
#

OBJ_SUFFIX=.rel
EXE=.ihx
OBJS = ${SRCS:.c=.rel}

.SUFFIXES: .c .rel

.c.rel:
	$(CC) -c $(CFLAGS) $(DEFINES) $(INCPATH) -o $@ $<

bldall : all

clean: doclean

doclean:
	$(RM) *.o *.a *.lib *.rel *.adb *.asm *.lst *.sym *.lnk *.map *.mem *.rst *.cdb core core.* vgcore.* *~  include/*~ $(BINS) $(OTHERS_CLEAN) $(TMP_SRCS)

PRETEST = echo

test:
	@for T in $(BINS_TEST) ; do \
		echo "Running test $$T ..." ; \
		[ A"$(PRETEST)" = A ] || $(PRETEST) ; \
		./$$T ; \
		if test $$? -ne 0; then \
			echo "Error in test $$T" ; \
			exit -1 ; \
		fi ; \
		echo "... Test $$T done" ; \
	done

rebuild: clean all


depend : $(SRCS)
	[ A"$(FAKE_DEPS)" = A ] || touch $(FAKE_DEPS)
	for a in $(SRCS) ; do                                                   \
	  $(CC) $(INCPATH) $(DEFINES) $(DEPSWITCH) $$a >> $(BUILD_HOME)/deps ; \
	done

# object dependencies
include $(BUILD_HOME)/deps
include $(BUILD_HOME)/Platform

#
# Modules definition: Libs & Includes
#

# logger
COMMON_LIB = $(BUILD_HOME)/common/libcommon.lib
COMMON_INC = $(BUILD_HOME)/include

# osif
OSIF_INC = $(BUILD_HOME)/osif/include
OSIF_LIB = $(BUILD_HOME)/osif/8051/libosif.lib

#transport
TRANSPORT_LIB = $(BUILD_HOME)/transport/libtransport.lib

# sdcc
SDCC_INC = /usr/share/sdcc/include

# MAC
MAC_LIB = $(BUILD_HOME)/mac/libmac.lib

# APS
APS_LIB = $(BUILD_HOME)/common/libaps.lib

# NWK
NWK_LIB = $(BUILD_HOME)/nwk/libnwk.lib

# ZDO
ZDO_LIB = $(BUILD_HOME)/zdo/libzdo.lib

# Security
SECUR_LIB = $(BUILD_HOME)/secur/libsec.lib

# ZCL
ZCL_LIB = $(BUILD_HOME)/zcl/libzcl.lib


#
# #####
#

INCPATH += -I$(OSIF_INC) -I$(COMMON_INC) -I$(SDCC_INC) -I$(BUILD_HOME)

LIBS_WO_APS= \
	$(COMMON_LIB) \
	$(OSIF_LIB) \
	$(MAC_LIB) \
	$(NWK_LIB)

LIBS = \
	$(LIBS_WO_APS) \
	$(SECUR_LIB) \
	$(APS_LIB) \
	$(ZDO_LIB)

LIBS_WO_APS_ED= \
	$(COMMON_LIB_ED) \
	$(OSIF_LIB_ED) \
	$(MAC_LIB_ED) \
	$(NWK_LIB_ED)

LIBS_ED = \
	$(LIBS_WO_APS_ED) \
	$(SECUR_LIB_ED) \
	$(APS_LIB_ED) \
	$(ZDO_LIB_ED) \
	$(ZCL_LIB_ED)

cpobjs: $(LIBS)
	for a in `echo $(LIBS) | sed -e 's/\/[^/][^/]*[.]lib//g' -e 's///g'` ; do  \
	  cp -f $$a/*.rel $$a/*.adb $$a/*.asm $$a/*.lst $$a/*.sym $$a/*.lnk $$a/*.map $$a/*.mem $$a/*.rst $$a/*.cdb $$a/*.c . ;\
	done
